<?xml version="1.0" encoding="UTF-8"?>
<doc id="W06-1402" editor="A" format="WS" position="NS" region="NN">
    <title>
        <text>A generation-oriented workbench for Performance Grammar: Capturing linear order variability in German and Dutch</text>
    </title>
    <abstract>
        <text>We describe a generation-oriented workbench for the Performance Grammar (PG) formalism, highlighting the treatment of certain word order and movement constraints in Dutch and German. PG enables a simple</text>
        <edit type="readability" crr="," comments="readability - replacing the 'and' with comma here to try to simplify this sentence slightly">and</edit>
        <text>uniform treatment of a heterogeneous collection of linear order phenomena in the domain of verb constructions</text>
        <edit type="clarity;flow" crr="(these phenomena are variously known as cross-serial dependencies, verb raising, clause union, extraposition, third construction, particle hopping, etc.)." comments="clarity - the placement of the parenthetical makes it confusing as to whether these names refer to constructions or the ordering phenomena - I think it's the latter, but I'd probably query the author to be sure. Alternately, we could move the original parenthetical to be after phenomena, but that would be more disruptive to the flow.">(variably known as Cross-serial Dependencies, Verb Raising, Clause Union, Extraposition, Third Construction, Particle Hopping, etc.). </edit>
        <text>The central data structures enabling this feature are clausal “topologies”: one-dimensional arrays associated with clauses, whose cells (“slots”) provide landing sites for the constituents of the clause. Movement operations are enabled by</text>
        <edit type="readability" crr="unification of" comments="readability - replacing the noun-possessive form with a verb to make this a bit easier to read">unifying</edit>
        <text>lateral slots of topologies at adjacent levels of the clause hierarchy. The PGW generator assists the grammar developer in testing whether the implemented syntactic knowledge allows all and only the well-formed permutations of constituents.</text>
    </abstract>   
    <introduction>
        <text>Workbenches for natural-language grammar formalisms typically provide a parser</text>
        <edit type="clarity" crr="that can test" comments="clarity - 'provide a parser to test' causes a bit of a reading stumble with the possibility of misreading it as giving the parser something.">to test</edit>
        <text>whether given sentences are treated adequately — D-PATR</text>
        <edit type="capitalization" crr="unification grammar (Karttunen, 1986) or XTAG for tree-adjoining grammars" comments="capitalization - typically not capitalized">Unification Grammar (Karttunen, 1986) or XTAG for Tree-Adjoining Grammars</edit>
        <text>(Paroubek et al., 1992) are early examples. However, a parser is not a convenient tool for checking whether the current grammar implementation licenses all and only the strings qualifying as well-formed expressions of a given input. Sentence generators that try out all possible combinations of grammar rules applicable to the current input, are better suited</text>
        <edit type="readability" crr="for this task." comments="readability - the meaning is fairly clear without this phrase, but having it helps the reader.">.</edit>
        <text>Few workbenches in the literature come with such a facility. LinGO (Copestake and Flickinger, 2000), for</text>
        <edit type="capitalization" crr="head-driven phrase structure grammar" comments="capitalization - typically not capitalized">Head-Driven Phrase Structure Grammar</edit>
        <text>, provides a generator in addition to a parser. For</text>
        <edit type="capitalization" crr="tree-adjoining grammars" comments="capitalization - typically not capitalized">Tree Adjoining Grammars</edit>
        <text>, several workbenches with generation components have been built: InTeGenInE (Harbusch and Woch, 2004) is a recent example.</text>
        <text>\\ Finetuning the grammar such that it neither over- nor undergenerates, is a major problem for semi-free word order languages (e.g., German; cf. Kallmeyer and Yoon, 2004). Working out a satisfactory solution to this problem is logically</text>
        <edit type="readability" crr="needed" comments="readability - though this could be omitted as the author did, I think it helps reading to have it."></edit>
        <text>prior to designing a generator capable of selecting, from the set of all possible paraphrases, those that sound “natural,” i.e., the ones human speakers/writers would choose in the situation at hand (cf. Kempen and Harbusch, 2004).</text>
        <text>\\ Verb constructions in German and Dutch exhibit extremely intricate word order patterns (cf. Seuren and Kempen, 2003). One of the factors contributing to this complexity is the phenomenon of clause union, which allows constituents of a complement clause to be interspersed between those of the dominating clause. The resulting sequences exhibit, among other things, cross-serial dependencies and clause-final verb clusters. Further complications arise from all sorts of “movement” phenomena such as fronting, extraction, dislocation, extraposition, scrambling, etc. Given the limited space available, we cannot describe the Performance Grammar (PG) formalism and the linearization algorithm that enables generating a broad range of linear order phenomena in Dutch, German, and English verb constructions. Instead, we refer to Harbusch and Kempen (2002), and Kempen and Harbusch (2002, 2003). Here, we present the generation-oriented PG Workbench (PGW), which assists grammar developers</text>
        <edit type="grammar;clarity" crr="in, among other things," comments="grammar/clarity - in the original 'among other things' appears to refer to 'developers', which clearly isn't correct. Moving the phrase into the propositional phrase clarifies this. Alternately, we could move it to after the 'which' earlier in the sentence.">, among other things, in</edit>
        <text>testing whether the implemented syntactic and lexical knowledge allows all and only well-formed permutations.</text>
        <text>\\ In Section 2, we describe PG's topology-based linearizer implemented in the PGW generator</text>
        <edit type="clarity" crr="and" comments="clarity - this makes it clearer that the design refers to the linearizer, not the generator (I assume this is true, but need the full paper to confirm)">,</edit>
        <text>whose software design is sketched in Section 3. Section 4 shows the PGW at work and draws some conclusions.</text>
    </introduction>   
</doc>