<?xml version="1.0" encoding="UTF-8"?>
<doc id="W06-1402" editor="B" format="WS" position="NS" region="NN">
    <title>
        <text>A generation-oriented workbench for Performance Grammar: Capturing linear order variability in German and Dutch</text>
    </title>
    <abstract>
        <text>We describe a generation-oriented workbench for the Performance Grammar (PG) formalism, highlighting the treatment of certain word order and movement constraints in Dutch and German. PG enables</text>
        <edit type="grammar" crr="" comments="">a</edit>
        <text>simple</text>
        <edit type="readability" crr="," comments="">and</edit>
        <text>uniform treatment of a heterogeneous collection of linear order phenomena in the domain of verb constructions (variably known as Cross-serial Dependencies, Verb Raising, Clause Union, Extraposition, Third Construction, Particle Hopping, etc.). The central data structures enabling this feature are clausal “topologies”: one-dimensional arrays associated with clauses, whose cells (“slots”) provide landing sites for the constituents of the clause. Movement operations are enabled by unification of lateral slots of topologies at adjacent levels of the clause hierarchy. The PGW generator assists the grammar developer in testing whether the implemented syntactic knowledge allows all and only the well-formed permutations of constituents.</text>
    </abstract>   
    <introduction>
        <text>Workbenches for natural-language grammar formalisms typically provide a parser to test whether given sentences are treated adequately — D-PATR for Unification Grammar (Karttunen, 1986) or XTAG for Tree-Adjoining Grammars (Paroubek et al., 1992)</text>
        <edit type="grammar" crr="were" comments="past tense versus present">are</edit>
        <text>early examples. However, a parser is not a convenient tool for checking whether the current grammar implementation licenses all and only the strings</text>
        <edit type="word choice" crr="that qualify" comments="">qualifying</edit>
        <text>as well-formed expressions of a given input. Sentence generators that try out all possible combinations of grammar rules applicable to the current input, are better suited</text>
        <edit type="clarity" crr="to this." comments="">.</edit>
        <text>\\ Few workbenches in the literature</text>
        <edit type="word choice" crr="are equipped with this" comments="">come with such a</edit>
        <text>facility. LinGO (Copestake and Flickinger, 2000), for Head-Driven Phrase Structure Grammar, provides a generator in addition to a parser. For Tree Adjoining Grammars, several workbenches with generation components have been built: InTeGenInE (Harbusch and Woch, 2004) is a recent example. Finetuning the grammar such that it neither over- nor undergenerates, is a major problem for semi-free word order languages (e.g., German; cf. Kallmeyer and Yoon, 2004). Working out a satisfactory solution to this problem is logically prior to designing a generator capable of selecting, from the set of all possible paraphrases, those that sound “natural,” i.e., the ones human speakers/writers would choose in the situation at hand (cf. Kempen and Harbusch, 2004).</text>
        <edit type="hyphenation" crr="\\ Fine-tuning" comments="">\\ Fine tuning</edit>
        <text>the grammar such that it neither over- nor undergenerates, is a major problem for semi-free word order languages (e.g., German; cf. Kallmeyer and Yoon, 2004). Working out a satisfactory solution to this problem is logically prior to designing a generator capable of selecting, from the set of all possible paraphrases, those that sound “natural,” i.e., the ones human speakers/writers would choose in the situation at hand (cf. Kempen and Harbusch, 2004).</text>
        <text>\\ Verb constructions in German and Dutch exhibit extremely intricate word order patterns (cf. Seuren and Kempen, 2003). One of the factors contributing to this complexity is the phenomenon of clause union, which allows constituents of a complement clause to be interspersed between those of the dominating clause. The resulting sequences exhibit, among other things, cross-serial dependencies and clause-final verb clusters. Further complications arise from all sorts of "movement" phenomena such as fronting, extraction, dislocation, extraposition, scrambling, etc. Given the limited space available, we cannot describe the Performance Grammar (PG) formalism and the linearization algorithm that enables generating a broad range of linear order phenomena in Dutch, German, and English verb constructions. Instead, we refer to Harbusch and Kempen (2002), and Kempen and Harbusch (2002, 2003). Here, we present the generation-oriented PG Workbench (PGW), which assists grammar developers</text>
        <edit type="word order" crr="in, among other things," comments="">, among other things, in</edit>
        <text>testing whether the implemented syntactic and lexical knowledge allows all and only well-formed permutations.</text>
        <text>\\ In Section 2, we describe PG's topology-based linearizer</text>
        <edit type="clarity" crr=", which is" comments="added for clarity"></edit>
        <text>implemented in the PGW generator</text>
        <edit type="clarity" crr=". The PGW generator" comments="Added for clarity">, whose</edit>
        <text>software design is sketched in Section 3. Section 4 shows the PGW at work and draws some conclusions.</text>
    </introduction>   
</doc>